import React, { useState, useEffect, FormEvent } from 'react';
import axios from 'axios';
import { useAuth } from '../../context/AuthContext';

import { IGameRecord, ITransaction } from '../../types/entities';
import styles from './ProfilePage.module.css'; // Import the CSS module

// Helper component for the table to keep the main component clean
const HistoryTable: React.FC<{ headers: string[]; children: React.ReactNode }> = ({ headers, children }) => (
    <table className={styles.historyTable}>
        <thead>
            <tr>
                {headers.map(h => <th key={h}>{h}</th>)}
            </tr>
        </thead>
        <tbody>
            {children}
        </tbody>
    </table>
);



const ProfilePage: React.FC = () => {
    const { user, refreshUser } = useAuth();

    const [gameHistory, setGameHistory] = useState<IGameRecord[]>([]);
    const [transactionHistory, setTransactionHistory] = useState<ITransaction[]>([]);
    const [loadingHistory, setLoadingHistory] = useState(true);
    const [historyError, setHistoryError] = useState('');

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º—ã —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
    const [currentPassword, setCurrentPassword] = useState('');
    const [newPassword, setNewPassword] = useState('');
    const [passwordMessage, setPasswordMessage] = useState({ type: '', text: '' });

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º—ã –±–∞–ª–∞–Ω—Å–∞
    const [balanceAmount, setBalanceAmount] = useState('');
    const [balanceMessage, setBalanceMessage] = useState({ type: '', text: '' });

    const fetchHistory = async () => {
        setHistoryError('');
        setLoadingHistory(true);
        try {
            const [gamesRes, transactionsRes] = await Promise.all([
                axios.get('http://localhost:5001/api/users/history/games'),
                axios.get('http://localhost:5001/api/users/history/transactions'),
            ]);
            setGameHistory(gamesRes.data);
            setTransactionHistory(transactionsRes.data);
        } catch (err: any) {
            console.error('Failed to fetch history:', err);
            setHistoryError(err.response?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é.');
        } finally {
            setLoadingHistory(false);
        }
    }

    useEffect(() => {
        fetchHistory();
    }, []);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
    const handlePasswordChange = async (e: FormEvent) => {
        e.preventDefault();
        setPasswordMessage({ type: '', text: '' });
        if (newPassword.length < 6) {
            setPasswordMessage({ type: 'error', text: '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤.' });
            return;
        }
        try {
            await axios.put('http://localhost:5001/api/users/profile/password', { currentPassword, newPassword });
            setPasswordMessage({ type: 'success', text: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!' });
            setCurrentPassword('');
            setNewPassword('');
        } catch (err: any) {
            setPasswordMessage({ type: 'error', text: err.response?.data?.message || '–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è' });
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    const handleBalanceUpdate = async (e: FormEvent, operation: 'deposit' | 'withdraw') => {
        e.preventDefault();
        setBalanceMessage({ type: '', text: '' });
        const amount = Number(balanceAmount);

        if (isNaN(amount) || amount <= 0) {
            setBalanceMessage({ type: 'error', text: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É.' });
            return;
        }

        const amountToSend = operation === 'deposit' ? Number(balanceAmount) : -Number(balanceAmount);
        
        try {
            await axios.post('http://localhost:5001/api/users/balance', { amount: amountToSend });
            setBalanceMessage({ type: 'success', text: '–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!' });
            setBalanceAmount('');
            fetchHistory();
        } catch (err: any) {
             setBalanceMessage({ type: 'error', text: err.response?.data?.message || '–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏' });
        }
    }

    if (!user) {
        return (
            <div className="loading-container">
                <div className="loading-content">
                    <div className="spinner"></div>
                    <p className="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è...</p>
                </div>
            </div>
        );
    }

    // –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    const statusTranslations: Record<IGameRecord['status'], string> = { WON: '–ü–æ–±–µ–¥–∞', LOST: '–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', DRAW: '–ù–∏—á—å—è' };
    const typeTranslations: Record<ITransaction['type'], string> = { DEPOSIT: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', WITHDRAWAL: '–í—ã–≤–æ–¥', WAGER_WIN: '–í—ã–∏–≥—Ä—ã—à', WAGER_LOSS: '–ü—Ä–æ–∏–≥—Ä—ã—à' };

    return (
        <div className={styles.pageContainer}>
            <div className={styles.profileContainer}>
                {/* Basic Info */}
                <div className={styles.profileSection}>
                    <h3>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                    <div className={styles.profileHeader}>
                        <div className={styles.profileAvatar}>{user.username.charAt(0).toUpperCase()}</div>
                        <div className={styles.profileInfo}>
                            <h2>{user.username}</h2>
                            <p><strong>Email:</strong> {user.email}</p>
                            <p><strong>–ë–∞–ª–∞–Ω—Å:</strong> <span className={styles.balanceHighlight}>${user.balance.toFixed(2)}</span></p>
                        </div>
                    </div>
                </div>

                {/* Security Settings */}
                <div className={styles.profileSection}>
                    <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</h3>
                    <h4 style={{ fontWeight: 500, color: '#a1a1aa', marginBottom: '1rem' }}>–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è</h4>
                    <form onSubmit={handlePasswordChange}>
                        <div className={styles.formGrid}>
                            <div className={styles.formGroup}>
                                <label className={styles.formLabel}>–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å</label>
                                <input type="password" value={currentPassword} onChange={(e) => setCurrentPassword(e.target.value)} className={styles.formInput} placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å" required />
                            </div>
                            <div className={styles.formGroup}>
                                <label className={styles.formLabel}>–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</label>
                                <input type="password" value={newPassword} onChange={(e) => setNewPassword(e.target.value)} className={styles.formInput} placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å" required />
                            </div>
                        </div>
                        <button type="submit" className={`${styles.btn} ${styles.btnPrimary}`}>üîí –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å</button>
                        {passwordMessage.text && <div className={`${styles.alert} ${passwordMessage.type === 'error' ? styles.alertError : styles.alertSuccess}`}><p>{passwordMessage.text}</p></div>}
                    </form>
                </div>

                {/* Balance Management */}
                <div className={styles.profileSection}>
                    <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º (–î–µ–º–æ)</h3>
                    <form>
                        <div className={styles.formRow}>
                            <div className={styles.formGroup}>
                                <label className={styles.formLabel}>–°—É–º–º–∞</label>
                                <input type="number" value={balanceAmount} onChange={(e) => setBalanceAmount(e.target.value)} className={styles.formInput} placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É" required />
                            </div>
                            <button onClick={(e) => handleBalanceUpdate(e, 'deposit')} className={`${styles.btn} ${styles.btnSuccess}`}>üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å</button>
                            <button type="button" onClick={(e) => handleBalanceUpdate(e, 'withdraw')} className={`${styles.btn} ${styles.btnSecondary}`}>üí∏ –í—ã–≤–µ—Å—Ç–∏</button>
                        </div>
                        {balanceMessage.text && <div className={`${styles.alert} ${balanceMessage.type === 'error' ? styles.alertError : styles.alertSuccess}`}><p>{balanceMessage.text}</p></div>}
                    </form>
                </div>

                {/* Game History */}
                <div className={styles.profileSection}>
                    <h3>–ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä</h3>
                    {loadingHistory && <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>}
                    {historyError && <div className={`${styles.alert} ${styles.alertError}`}>{historyError}</div>}
                    {!loadingHistory && !historyError && (
                        <HistoryTable headers={['–ò–≥—Ä–∞', '–†–µ–∑—É–ª—å—Ç–∞—Ç', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞', '–î–∞—Ç–∞']}>
                            {gameHistory.map(game => (
                                <tr key={game._id}>
                                    <td>{game.gameName}</td>
                                    <td>
                                        <span className={`${styles.badge} ${game.status === 'WON' ? styles.badgeGreen : game.status === 'LOST' ? styles.badgeRed : styles.badgeYellow}`}>
                                            {statusTranslations[game.status]}
                                        </span>
                                    </td>
                                    <td className={game.amountChanged >= 0 ? styles.amountPositive : styles.amountNegative}>
                                        {game.amountChanged >= 0 ? '+' : ''}${game.amountChanged.toFixed(2)}
                                    </td>
                                    <td>{new Date(game.createdAt).toLocaleString()}</td>
                                </tr>
                            ))}
                        </HistoryTable>
                    )}
                </div>

                {/* Transaction History */}
                <div className={styles.profileSection}>
                    <h3>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</h3>
                    {loadingHistory && <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>}
                    {historyError && <div className={`${styles.alert} ${styles.alertError}`}>{historyError}</div>}
                    {!loadingHistory && !historyError && (
                         <HistoryTable headers={['–¢–∏–ø', '–°—Ç–∞—Ç—É—Å', '–°—É–º–º–∞', '–î–∞—Ç–∞']}>
                           {transactionHistory.map(tx => (
                                <tr key={tx._id}>
                                    <td>{typeTranslations[tx.type]}</td>
                                    <td>{tx.status}</td>
                                    <td>${tx.amount.toFixed(2)}</td>
                                    <td>{new Date(tx.createdAt).toLocaleString()}</td>
                                </tr>
                            ))}
                        </HistoryTable>
                    )}
                </div>
            </div>
        </div>
    );
};

export default ProfilePage;