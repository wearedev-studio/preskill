// import React, { useState } from 'react';

// // –¢–∏–ø—ã, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –≤ —à–∞—à–∫–∏, –ø—Ä–∏—Ö–æ–¥—è—â–µ–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
// type Piece = {
//     playerIndex: 0 | 1;
//     isKing: boolean;
// };
// type CheckersGameState = {
//     board: (Piece | null)[];
// };
// type CheckersMove = {
//     from: number;
//     to: number;
// };

// // –ü—Ä–æ–ø—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
// interface CheckersBoardProps {
//     gameState: CheckersGameState;
//     onMove: (move: CheckersMove) => void;
//     isMyTurn: boolean;
//     isGameFinished: boolean;
//     myPlayerIndex: 0 | 1; // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ (0 –∏–ª–∏ 1)
// }

// const CheckersBoard: React.FC<CheckersBoardProps> = ({ gameState, onMove, isMyTurn, isGameFinished, myPlayerIndex }) => {
//     const [selectedPiece, setSelectedPiece] = useState<number | null>(null);

//     const handleSquareClick = (index: number) => {
//         // –ó–∞–ø—Ä–µ—â–∞–µ–º –ª—é–±—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à —Ö–æ–¥ –∏–ª–∏ –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
//         if (!isMyTurn || isGameFinished) return;

//         const piece = gameState.board[index];

//         if (selectedPiece !== null) {
//             // –í—Ç–æ—Ä–æ–π –∫–ª–∏–∫ - –ø–æ–ø—ã—Ç–∫–∞ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
//             // TODO: –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ö–æ–¥–∞ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
//             onMove({ from: selectedPiece, to: index });
//             setSelectedPiece(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ—Å–ª–µ –ª—é–±–æ–≥–æ —Ö–æ–¥–∞
//         } else if (piece && piece.playerIndex === myPlayerIndex) {
//             // –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫ - –≤—ã–±–æ—Ä —Å–≤–æ–µ–π —à–∞—à–∫–∏
//             setSelectedPiece(index);
//         }
//     };

//     // –°—Ç–∏–ª–∏ –¥–ª—è –¥–æ—Å–∫–∏ –∏ —Ñ–∏–≥—É—Ä
//     const boardStyle: React.CSSProperties = {
//         display: 'grid',
//         gridTemplateColumns: 'repeat(8, 60px)',
//         gridTemplateRows: 'repeat(8, 60px)',
//         width: '480px',
//         height: '480px',
//         border: '2px solid #5a3a22',
//         margin: '20px auto',
//     };

//     const getSquareStyle = (index: number): React.CSSProperties => {
//         const row = Math.floor(index / 8);
//         const col = index % 8;
//         const isDark = (row + col) % 2 !== 0;
//         return {
//             backgroundColor: isDark ? '#8B4513' : '#F0D9B5',
//             display: 'flex',
//             justifyContent: 'center',
//             alignItems: 'center',
//             cursor: 'pointer',
//             border: index === selectedPiece ? '3px solid #64ffda' : 'none', // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —à–∞—à–∫–∏
//         };
//     };

//     const pieceStyle: React.CSSProperties = {
//         width: '80%',
//         height: '80%',
//         borderRadius: '50%',
//         display: 'flex',
//         justifyContent: 'center',
//         alignItems: 'center',
//         color: 'white',
//         fontSize: '1.5rem',
//         fontWeight: 'bold',
//     };

//     return (
//         <div style={boardStyle}>
//             {gameState.board.map((piece, index) => (
//                 <div key={index} style={getSquareStyle(index)} onClick={() => handleSquareClick(index)}>
//                     {piece && (
//                         <div style={{
//                             ...pieceStyle,
//                             backgroundColor: piece.playerIndex === 0 ? '#1e1e1e' : '#e0e0e0', // –ß–µ—Ä–Ω—ã–µ –∏ –±–µ–ª—ã–µ
//                             color: piece.playerIndex === 0 ? 'white' : 'black',
//                         }}>
//                             {piece.isKing && 'üëë'}
//                         </div>
//                     )}
//                 </div>
//             ))}
//         </div>
//     );
// };

// export default CheckersBoard;


import React, { useState } from 'react';
import styles from './CheckersBoard.module.css'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏

// –¢–∏–ø—ã, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –≤ —à–∞—à–∫–∏, –ø—Ä–∏—Ö–æ–¥—è—â–µ–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
type Piece = {
    playerIndex: 0 | 1;
    isKing: boolean;
};
type CheckersGameState = {
    board: (Piece | null)[];
};
type CheckersMove = {
    from: number;
    to: number;
};

// –ü—Ä–æ–ø—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
interface CheckersBoardProps {
    gameState: CheckersGameState;
    onMove: (move: CheckersMove) => void;
    isMyTurn: boolean;
    isGameFinished: boolean;
    myPlayerIndex: 0 | 1;
}

const CheckersBoard: React.FC<CheckersBoardProps> = ({ gameState, onMove, isMyTurn, isGameFinished, myPlayerIndex }) => {
    const [selectedPiece, setSelectedPiece] = useState<number | null>(null);

    const handleSquareClick = (index: number) => {
        if (!isMyTurn || isGameFinished) return;

        const piece = gameState.board[index];

        if (selectedPiece !== null) {
            // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —Ç—É –∂–µ —à–∞—à–∫—É, —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            if (selectedPiece === index) {
                setSelectedPiece(null);
                return;
            }
            
            // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —Å–≤–æ—é –¥—Ä—É–≥—É—é —à–∞—à–∫—É, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            if (piece && piece.playerIndex === myPlayerIndex) {
                setSelectedPiece(index);
                return;
            }
            
            // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É –∏–ª–∏ —á—É–∂—É—é —à–∞—à–∫—É, –ø—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
            // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π —Ö–æ–¥, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            const row = Math.floor(index / 8);
            const col = index % 8;
            const isDark = (row + col) % 2 !== 0;
            
            // –•–æ–¥–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–Ω—ã–º –∫–ª–µ—Ç–∫–∞–º
            if (isDark) {
                onMove({ from: selectedPiece, to: index });
            }
            setSelectedPiece(null);
        } else if (piece && piece.playerIndex === myPlayerIndex) {
            // –í—ã–±–∏—Ä–∞–µ–º —Å–≤–æ—é —à–∞—à–∫—É
            setSelectedPiece(index);
        }
        // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —á—É–∂—É—é —à–∞—à–∫—É –∏–ª–∏ –ø—É—Å—Ç—É—é —Å–≤–µ—Ç–ª—É—é –∫–ª–µ—Ç–∫—É - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    };

    return (
        <div className={styles.boardContainer}>
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≥—Ä–æ–∫–∞—Ö */}
            <div style={{
                marginBottom: '10px',
                textAlign: 'center',
                fontSize: '14px',
                color: '#64748b'
            }}>
                <div style={{ marginBottom: '5px' }}>
                    <span style={{
                        display: 'inline-block',
                        width: '12px',
                        height: '12px',
                        borderRadius: '50%',
                        backgroundColor: '#f5f5f5',
                        border: '1px solid #ccc',
                        marginRight: '5px'
                    }}></span>
                    –ë–µ–ª—ã–µ (—Ö–æ–¥—è—Ç –ø–µ—Ä–≤—ã–º–∏) - –ò–≥—Ä–æ–∫ {myPlayerIndex === 0 ? '(–í—ã)' : '(–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫)'}
                </div>
                <div>
                    <span style={{
                        display: 'inline-block',
                        width: '12px',
                        height: '12px',
                        borderRadius: '50%',
                        backgroundColor: '#1e1e1e',
                        border: '1px solid #333',
                        marginRight: '5px'
                    }}></span>
                    –ß–µ—Ä–Ω—ã–µ - –ò–≥—Ä–æ–∫ {myPlayerIndex === 1 ? '(–í—ã)' : '(–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫)'}
                </div>
            </div>
            
            <div className={styles.board}>
                {gameState.board.map((piece, index) => {
                    const row = Math.floor(index / 8);
                    const col = index % 8;
                    const isDark = (row + col) % 2 !== 0;
                    const isSelected = index === selectedPiece;

                    return (
                        <div
                            key={index}
                            className={`${styles.square} ${isDark ? styles.dark : styles.light} ${isSelected ? styles.selected : ''}`}
                            onClick={() => handleSquareClick(index)}
                        >
                            {piece && (
                                <div className={`${styles.piece} ${piece.playerIndex === 0 ? styles.player1 : styles.player0}`}>
                                    {piece.isKing && 'üëë'}
                                </div>
                            )}
                        </div>
                    );
                })}
            </div>
        </div>
    );
};

export default CheckersBoard;