import { Server } from 'socket.io';
import cron from 'node-cron';
import Tournament, { ITournament } from '../models/Tournament.model';
import { botUsernames, Room, gameLogics, rooms, userSocketMap } from '../socket';
import User from '../models/User.model';
import Transaction from '../models/Transaction.model';

import { createNotification } from './notification.service';


// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
function shuffleArray(array: any[]) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–≥–æ –º–∞—Ç—á–∞ –∏ –æ–ø–æ–≤–µ—â–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤
 */
async function createTournamentMatchRoom(io: Server, tournament: ITournament, match: any) {
    const realPlayers = match.players.filter((p: any) => !p.isBot);
    
    if (realPlayers.length === 0) {
        const winner = match.players[Math.floor(Math.random() * 2)];
        // –ï—Å–ª–∏ –∏–≥—Ä–∞—é—Ç –¥–≤–∞ –±–æ—Ç–∞, —Å—Ä–∞–∑—É –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        // @ts-ignore
        return advanceTournamentWinner(io, tournament._id, match.matchId, winner);
    }

    const roomId = `tourney-${tournament._id}-match-${match.matchId}`;
    const gameLogic = gameLogics[tournament.gameType];
    
    // –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Ö —Å–æ–∫–µ—Ç—ã
    const roomPlayers = [];
    for (const player of realPlayers) {
        const socketId = userSocketMap[player._id.toString()];
        if (socketId) {
            const socket = io.sockets.sockets.get(socketId);
            if (socket) {
                roomPlayers.push({ socketId, user: (socket as any).user });
            }
        }
    }

    const newRoom: Room = {
        id: roomId,
        gameType: tournament.gameType,
        bet: 0, // –í —Ç—É—Ä–Ω–∏—Ä–∞—Ö –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫
        players: roomPlayers,
        gameState: gameLogic.createInitialState(roomPlayers),
    };
    rooms[roomId] = newRoom;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ–º–Ω–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const round = tournament.bracket.find(r => r.matches.some(m => m.matchId === match.matchId));
    const matchInDB = round?.matches.find(m => m.matchId === match.matchId);
    if (matchInDB) matchInDB.roomId = roomId;

    // –û–ø–æ–≤–µ—â–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤, —á—Ç–æ –∏—Ö –º–∞—Ç—á –≥–æ—Ç–æ–≤
    roomPlayers.forEach(p => {
        const socket = io.sockets.sockets.get(p.socketId);
        socket?.join(roomId);
        // –°—Ç–∞—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≥–æ–≤–æ—Ä–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É
        // @ts-ignore
        io.to(socket.id).emit('matchReady', { tournamentId: tournament._id, roomId });

        // –ù–û–í–û–ï! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —ç—Ç–æ–º—É –∂–µ –∏–≥—Ä–æ–∫—É
        // @ts-ignore
        createNotification(io, (socket as any).user._id.toString(), {
            title: `‚öîÔ∏è –í–∞—à –º–∞—Ç—á –≤ —Ç—É—Ä–Ω–∏—Ä–µ "${tournament.name}" –≥–æ—Ç–æ–≤!`,
            message: '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.',
            link: `/tournaments/${tournament._id}`
        });
    });
}


/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞, –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –º–∞—Ç—á–∏.
 */
export async function advanceTournamentWinner(io: Server, tournamentId: string, matchId: number, winnerData: any) {
    const tournament = await Tournament.findById(tournamentId);
    if (!tournament || tournament.status !== 'ACTIVE') return;

    let currentRoundIndex = -1, currentMatchIndex = -1, nextRoundExists = false;

    // 1. –ù–∞—Ö–æ–¥–∏–º –º–∞—Ç—á –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    for (let i = 0; i < tournament.bracket.length; i++) {
        const matchIndex = tournament.bracket[i].matches.findIndex(m => m.matchId === matchId);
        if (matchIndex !== -1) {
            currentRoundIndex = i;
            currentMatchIndex = matchIndex;
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if (!tournament.bracket[i].matches[matchIndex].winner) {
                tournament.bracket[i].matches[matchIndex].winner = winnerData;
            }
            break;
        }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥
    const currentRound = tournament.bracket[currentRoundIndex];
    if (!currentRound.matches.every(m => m.winner)) {
        await tournament.save();
        io.emit('tournamentUpdated', { tournamentId });
        return; // –†–∞—É–Ω–¥ –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    }

    // 3. –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ì–æ—Ç–æ–≤–∏–º —Å–ª–µ–¥—É—é—â–∏–π –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç—É—Ä–Ω–∏—Ä.
    const winners = currentRound.matches.map(m => m.winner!);

    if (winners.length === 1) { // –≠—Ç–æ –±—ã–ª —Ñ–∏–Ω–∞–ª
        tournament.status = 'FINISHED';
        const tournamentWinner = winners[0];
        // @ts-ignore
        if (!tournamentWinner.isBot) {
            await User.findByIdAndUpdate(tournamentWinner._id, { $inc: { balance: tournament.prizePool } });
            await Transaction.create({ user: tournamentWinner._id, type: 'TOURNAMENT_WINNINGS', amount: tournament.prizePool });
            await createNotification(io, tournamentWinner._id.toString(), {
                title: 'üèÜ –ü–æ–±–µ–¥–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–µ!',
                message: `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${tournament.prizePool}$ –≤ —Ç—É—Ä–Ω–∏—Ä–µ "${tournament.name}"!`
            });
        }
        // @ts-ignore
        console.log(`[Tournament] ${tournament.name} finished. Winner: ${tournamentWinner.username}`);
    } else { // –°–æ–∑–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
        const nextRoundMatches = [];
        for (let i = 0; i < winners.length; i += 2) {
            nextRoundMatches.push({
                matchId: Date.now() + i, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞—Ç—á–∞
                players: [winners[i], winners[i + 1]],
            });
        }
        tournament.bracket.push({ roundName: `Round ${currentRoundIndex + 2}`, matches: nextRoundMatches });
        
        // –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
        for (const match of nextRoundMatches) {
            await createTournamentMatchRoom(io, tournament, match);
        }
    }

    await tournament.save();
    io.emit('tournamentUpdated', { tournamentId });
}



/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç—É—Ä–Ω–∏—Ä
 */
export async function startTournament(tournamentId: string, io: Server) {
    const tournament = await Tournament.findById(tournamentId).populate('players');
    if (!tournament || tournament.status !== 'REGISTERING') return;
    
    console.log(`[Tournament Service] Starting tournament ${tournament.name}`);

    const neededBots = tournament.maxPlayers - tournament.players.length;
    const botPlayers = Array.from({ length: neededBots }, (_, i) => ({
        _id: `bot-${Date.now()}-${i}`, isBot: true,
        username: botUsernames[Math.floor(Math.random() * botUsernames.length)],
    }));

    const allParticipants = [...tournament.players, ...botPlayers];
    shuffleArray(allParticipants);

    const matches = [];
    for (let i = 0; i < allParticipants.length; i += 2) {
        matches.push({ matchId: i / 2 + 1, players: [allParticipants[i], allParticipants[i + 1]] });
    }

    tournament.bracket = [{ roundName: 'Round 1', matches }];
    tournament.status = 'ACTIVE';
    
    for (const match of tournament.bracket[0].matches) {
        await createTournamentMatchRoom(io, tournament, match);
    }
    
    await tournament.save();
    io.emit('tournamentUpdated', { tournamentId: tournament._id });
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CRON-–∑–∞–¥–∞—á–∏
 */
export const initializeTournamentScheduler = (io: Server) => {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    cron.schedule('* * * * *', async () => {
        const now = new Date();
        const oneMinuteWarningTime = new Date(now.getTime() + 60 * 1000);

        // –ù–∞—Ö–æ–¥–∏–º —Ç—É—Ä–Ω–∏—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—É—Ç—Å—è, –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const warningTournaments = await Tournament.find({
            startTime: { $gt: now, $lte: oneMinuteWarningTime },
            status: 'REGISTERING',
        });
        for (const tournament of warningTournaments) {
            for (const playerId of tournament.players) {
                await createNotification(io, playerId.toString(), {
                    title: '‚è∞ –¢—É—Ä–Ω–∏—Ä —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è!',
                    message: `–¢—É—Ä–Ω–∏—Ä "${tournament.name}" –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.`,
                    link: `/tournaments/${tournament._id}`
                });
            }
        }

        // –ù–∞—Ö–æ–¥–∏–º —Ç—É—Ä–Ω–∏—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –Ω–∞—á–∞—Ç—å—Å—è
        const dueTournaments = await Tournament.find({
            startTime: { $lte: now },
            status: 'REGISTERING',
        });
        for (const tournament of dueTournaments) {
            // @ts-ignore
            await startTournament(tournament._id.toString(), io);
        }
    });
};