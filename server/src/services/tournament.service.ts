import { Server } from 'socket.io';
import cron from 'node-cron';
import Tournament, { ITournament, ITournamentPlayer } from '../models/Tournament.model';
import { botUsernames, Room, gameLogics, rooms, userSocketMap } from '../socket';
import User from '../models/User.model';
import Transaction from '../models/Transaction.model';
import { createNotification } from './notification.service';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
function shuffleArray(array: any[]) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–≥–æ –º–∞—Ç—á–∞ –∏ –æ–ø–æ–≤–µ—â–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤
 */
async function createTournamentMatchRoom(io: Server, tournament: ITournament, match: any) {
    const realPlayers = match.players.filter((p: any) => !p.isBot);
    
    // –ï—Å–ª–∏ –∏–≥—Ä–∞—é—Ç —Ç–æ–ª—å–∫–æ –±–æ—Ç—ã, —Å—Ä–∞–∑—É –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if (realPlayers.length === 0) {
        const winner = match.players[Math.floor(Math.random() * 2)];
        console.log(`[Tournament] Bot vs Bot match: ${match.players[0].username} vs ${match.players[1].username}, winner: ${winner.username}`);
        return advanceTournamentWinner(io, tournament._id!.toString(), match.matchId, winner);
    }

    const roomId = `tourney-${tournament._id}-match-${match.matchId}`;
    const gameLogic = gameLogics[tournament.gameType];
    
    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã (–≤–∫–ª—é—á–∞—è –±–æ—Ç–æ–≤)
    const roomPlayers = [];
    for (const player of match.players) {
        if (player.isBot) {
            // –î–ª—è –±–æ—Ç–∞ —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            roomPlayers.push({
                socketId: 'bot_socket_id',
                user: {
                    _id: player._id,
                    username: player.username,
                    avatar: 'bot_avatar.png',
                    balance: 9999
                }
            });
        } else {
            // –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏—â–µ–º –µ–≥–æ —Å–æ–∫–µ—Ç
            const socketId = userSocketMap[player._id.toString()];
            if (socketId) {
                const socket = io.sockets.sockets.get(socketId);
                if (socket) {
                    roomPlayers.push({ socketId, user: (socket as any).user });
                }
            }
        }
    }

    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Å–µ—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤, –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –º–∞—Ç—á
    if (roomPlayers.length !== match.players.length) {
        console.log(`[Tournament] Not all players found for match ${match.matchId}, retrying later`);
        setTimeout(() => createTournamentMatchRoom(io, tournament, match), 5000);
        return;
    }

    const newRoom: Room = {
        id: roomId,
        gameType: tournament.gameType,
        bet: 0, // –í —Ç—É—Ä–Ω–∏—Ä–∞—Ö –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫
        players: roomPlayers,
        gameState: gameLogic.createInitialState(roomPlayers),
    };
    rooms[roomId] = newRoom;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ–º–Ω–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const round = tournament.bracket.find(r => r.matches.some(m => m.matchId === match.matchId));
    const matchInDB = round?.matches.find(m => m.matchId === match.matchId);
    if (matchInDB) matchInDB.roomId = roomId;

    // –û–ø–æ–≤–µ—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    for (const player of roomPlayers) {
        if (!player.user._id.toString().startsWith('bot-')) {
            const socket = io.sockets.sockets.get(player.socketId);
            if (socket) {
                socket.join(roomId);
                io.to(socket.id).emit('matchReady', { 
                    tournamentId: tournament._id, 
                    roomId 
                });

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                createNotification(io, (socket as any).user._id.toString(), {
                    title: `‚öîÔ∏è –í–∞—à –º–∞—Ç—á –≤ —Ç—É—Ä–Ω–∏—Ä–µ "${tournament.name}" –≥–æ—Ç–æ–≤!`,
                    message: '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.',
                    link: `/tournaments/${tournament._id}`
                });
            }
        }
    }

    console.log(`[Tournament] Created match room ${roomId} for tournament ${tournament.name}`);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞, –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –º–∞—Ç—á–∏.
 */
export async function advanceTournamentWinner(io: Server, tournamentId: string, matchId: number, winnerData: any) {
    try {
        const tournament = await Tournament.findById(tournamentId);
        if (!tournament || tournament.status !== 'ACTIVE') {
            console.log(`[Tournament] Tournament ${tournamentId} not found or not active`);
            return;
        }

        let currentRoundIndex = -1;
        let currentMatchIndex = -1;

        // 1. –ù–∞—Ö–æ–¥–∏–º –º–∞—Ç—á –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        for (let i = 0; i < tournament.bracket.length; i++) {
            const matchIndex = tournament.bracket[i].matches.findIndex(m => m.matchId === matchId);
            if (matchIndex !== -1) {
                currentRoundIndex = i;
                currentMatchIndex = matchIndex;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω
                if (!tournament.bracket[i].matches[matchIndex].winner) {
                    tournament.bracket[i].matches[matchIndex].winner = winnerData;
                    console.log(`[Tournament] Match ${matchId} winner: ${winnerData.username || winnerData._id}`);
                } else {
                    console.log(`[Tournament] Match ${matchId} already has a winner, skipping`);
                    return;
                }
                break;
            }
        }

        if (currentRoundIndex === -1) {
            console.log(`[Tournament] Match ${matchId} not found in tournament ${tournamentId}`);
            return;
        }

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥
        const currentRound = tournament.bracket[currentRoundIndex];
        const allMatchesFinished = currentRound.matches.every(m => m.winner);
        
        if (!allMatchesFinished) {
            await tournament.save();
            io.emit('tournamentUpdated', { tournamentId });
            console.log(`[Tournament] Round ${currentRoundIndex + 1} not finished yet`);
            return;
        }

        // 3. –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ì–æ—Ç–æ–≤–∏–º —Å–ª–µ–¥—É—é—â–∏–π –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç—É—Ä–Ω–∏—Ä.
        const winners = currentRound.matches.map(m => m.winner!);
        console.log(`[Tournament] Round ${currentRoundIndex + 1} finished. Winners:`, winners.map(w => w.username));

        if (winners.length === 1) {
            // –≠—Ç–æ –±—ã–ª —Ñ–∏–Ω–∞–ª
            tournament.status = 'FINISHED';
            const tournamentWinner = winners[0];
            
            // –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –±–æ—Ç)
            if (!tournamentWinner.isBot && tournamentWinner._id) {
                await User.findByIdAndUpdate(tournamentWinner._id, {
                    $inc: { balance: tournament.prizePool }
                });
                await Transaction.create({
                    user: tournamentWinner._id,
                    type: 'TOURNAMENT_WINNINGS',
                    amount: tournament.prizePool
                });
                await createNotification(io, tournamentWinner._id.toString(), {
                    title: 'üèÜ –ü–æ–±–µ–¥–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–µ!',
                    message: `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${tournament.prizePool}$ –≤ —Ç—É—Ä–Ω–∏—Ä–µ "${tournament.name}"!`
                });
            }
            
            console.log(`[Tournament] ${tournament.name} finished. Winner: ${tournamentWinner.username}`);
        } else {
            // –°–æ–∑–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
            const nextRoundMatches = [];
            for (let i = 0; i < winners.length; i += 2) {
                const matchId = Date.now() + Math.random(); // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
                nextRoundMatches.push({
                    matchId: Math.floor(matchId),
                    players: [winners[i], winners[i + 1]],
                    winner: undefined,
                    roomId: undefined
                });
            }
            
            const roundNames = ['Round 1', 'Quarter-finals', 'Semi-finals', 'Final'];
            const roundName = roundNames[currentRoundIndex + 1] || `Round ${currentRoundIndex + 2}`;
            
            tournament.bracket.push({
                roundName,
                matches: nextRoundMatches
            });
            
            console.log(`[Tournament] Created ${roundName} with ${nextRoundMatches.length} matches`);
            
            // –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
            for (const match of nextRoundMatches) {
                await createTournamentMatchRoom(io, tournament, match);
            }
        }

        await tournament.save();
        io.emit('tournamentUpdated', { tournamentId });
        
    } catch (error) {
        console.error(`[Tournament] Error in advanceTournamentWinner:`, error);
    }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç—É—Ä–Ω–∏—Ä
 */
export async function startTournament(tournamentId: string, io: Server) {
    try {
        const tournament = await Tournament.findById(tournamentId).populate('players');
        if (!tournament || tournament.status !== 'REGISTERING') {
            console.log(`[Tournament] Cannot start tournament ${tournamentId} - not found or not in REGISTERING status`);
            return;
        }
        
        console.log(`[Tournament Service] Starting tournament ${tournament.name} with ${tournament.players.length} players`);

        // –î–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–æ–≤ –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        const neededBots = tournament.maxPlayers - tournament.players.length;
        const botPlayers: ITournamentPlayer[] = Array.from({ length: neededBots }, (_, i) => ({
            _id: `bot-${Date.now()}-${i}`,
            isBot: true,
            username: botUsernames[Math.floor(Math.random() * botUsernames.length)] + `_${i + 1}`,
        }));

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ ITournamentPlayer
        const realPlayers: ITournamentPlayer[] = await Promise.all(
            tournament.players.map(async (playerId) => {
                const user = await User.findById(playerId).select('username');
                return {
                    _id: playerId.toString(),
                    username: user?.username || 'Unknown',
                    isBot: false
                };
            })
        );

        const allParticipants = [...realPlayers, ...botPlayers];
        shuffleArray(allParticipants);

        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥
        const matches = [];
        for (let i = 0; i < allParticipants.length; i += 2) {
            matches.push({
                matchId: Math.floor(Date.now() + Math.random() + i),
                players: [allParticipants[i], allParticipants[i + 1]],
                winner: undefined,
                roomId: undefined
            });
        }

        tournament.bracket = [{ roundName: 'Round 1', matches }];
        tournament.status = 'ACTIVE';
        
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
        for (const match of tournament.bracket[0].matches) {
            await createTournamentMatchRoom(io, tournament, match);
        }
        
        await tournament.save();
        io.emit('tournamentUpdated', { tournamentId: tournament._id });
        
        console.log(`[Tournament] Successfully started tournament ${tournament.name}`);
        
    } catch (error) {
        console.error(`[Tournament] Error starting tournament ${tournamentId}:`, error);
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CRON-–∑–∞–¥–∞—á–∏
 */
export const initializeTournamentScheduler = (io: Server) => {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    cron.schedule('* * * * *', async () => {
        try {
            const now = new Date();
            const oneMinuteWarningTime = new Date(now.getTime() + 60 * 1000);

            // –ù–∞—Ö–æ–¥–∏–º —Ç—É—Ä–Ω–∏—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—É—Ç—Å—è
            const warningTournaments = await Tournament.find({
                startTime: { $gt: now, $lte: oneMinuteWarningTime },
                status: 'REGISTERING',
            });
            
            for (const tournament of warningTournaments) {
                for (const playerId of tournament.players) {
                    await createNotification(io, playerId.toString(), {
                        title: '‚è∞ –¢—É—Ä–Ω–∏—Ä —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è!',
                        message: `–¢—É—Ä–Ω–∏—Ä "${tournament.name}" –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.`,
                        link: `/tournaments/${tournament._id}`
                    });
                }
            }

            // –ù–∞—Ö–æ–¥–∏–º —Ç—É—Ä–Ω–∏—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∞—Ç—å—Å—è
            const dueTournaments = await Tournament.find({
                startTime: { $lte: now },
                status: 'REGISTERING',
            });
            
            for (const tournament of dueTournaments) {
                if (tournament.players.length > 0) {
                    await startTournament(tournament._id!.toString(), io);
                } else {
                    // –ï—Å–ª–∏ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤, –æ—Ç–º–µ–Ω—è–µ–º —Ç—É—Ä–Ω–∏—Ä
                    tournament.status = 'CANCELLED';
                    await tournament.save();
                    console.log(`[Tournament] Cancelled tournament ${tournament.name} - no players`);
                }
            }
        } catch (error) {
            console.error('[Tournament Scheduler] Error:', error);
        }
    });
    
    console.log('[Tournament Scheduler] Initialized');
};